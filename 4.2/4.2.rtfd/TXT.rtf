{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red39\green38\blue61;\red0\green0\blue0;
\red39\green39\blue61;\red39\green38\blue61;\red39\green38\blue60;\red43\green135\blue194;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c20393\c20433\c30504;\cssrgb\c0\c0\c0;
\cssrgb\c20471\c20520\c30565;\cssrgb\c20314\c20347\c30442;\cssrgb\c20157\c20174\c30319;\cssrgb\c20402\c60498\c80448;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\b\fs24 \cf0 \cb2 \expnd0\expndtw0\kerning0
Exercise I.a.1
\f1\b0  The listening socket is bound to a specific address. What address is this? (Give both the symbolic name used in the code, and the corresponding IPv4 address in numeric or dotted notation). \
INADDR_ANY -> 0.0.0.0\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b \cf0 \kerning1\expnd0\expndtw0 Exercise I.a.2
\f1\b0  In the code, there is a call to recv() as follows: ret = recv( cd.sock, cd.buffer, kTransferBufferSize, 0 ); The return value ret will be one of the following:\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}ret = -1 : error while performing recv()\
{\listtext	\uc0\u8259 	}ret = 0 : no message available\
{\listtext	\uc0\u8259 	}ret = 0 < ret < bufferSize : length of message in bytes\
{\listtext	\uc0\u8259 	}ret = bufferSize : : length of message is buffer size, maybe there is an other recv() call needed because the received message is too long\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
bufferSize+1 : ConnectionData.buffer is 1 byte longer than the real buffer size to store the \'91\\0\'92 character at the end of the message (this is the \'ab\'a0null\'a0\'bb character, it is used to signify the end of a string).\
\
\

\f0\b Exercise I.a.3
\f1\b0  \expnd0\expndtw0\kerning0
Sending is performed using the send() method as follows: ret = send( cd.sock, cd.buffer+cd.bufferOffset, cd.bufferSize-cd.bufferOffset, MSG_NOSIGNAL ); How does the send() method indicate that the connection in question has been closed/reset? How does MSG_NOSIGNAL relate to this (on linux machines)? \
\
SIGPIPE is a socket signal which, if not handled, will cause the process to exit. Then, the process must catch the signal to avoid being involuntary terminated. So there is specific ways to do this:\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
On Linux, you can add the \'ab\'a0MSG_NOSIGNAL\'a0\'bb parameter to the send() function : it requests not to send the SIGPIPE signal, and you can still catch the error by checking the errno value of the socket which must be \'ab\'a0EPIPE\'a0\'bb, then you can admit that the connection is finished.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}On macOS, you can add the \'ab\'a0SO_NOSIGPIPE\'a0\'bb parameter to the setsockopt() function (which is handled while the socket setup).\expnd0\expndtw0\kerning0
\
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Exercise I.a.4
\f1\b0  Discuss the reasons for this behaviour with your partner. Why are these two strategies used? Also, quickly look through the error codes (values of errno) possible after accept(), send(), and recv() (check the man-pages!). Under which conditions attempting to continue execution might be unreasonable? \
\pard\tx566\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 If the server crashes during setup, the server won\'92t work at all, there is no sense if the process stays alive. However, if an error occurred while a client connection has been established, the server can probably continue its communications with other clients. It might be unreasonable to continue execution if the errno values of the socket are EBADF, EFAULT, EINTR, EMFILE, ENFILE, ENOBUFS, ENOMEM, ENOTSOCK, EOPNOTSUPP, EPERM, or EPROTO.\
\
\

\f0\b Exercise I.b.1
\f1\b0  Discuss with your partner: How is the program notified that a connection attempt has failed or succeeded? \
\
If a connection attempt has failed, the file descriptor of the connection socket will be equal to \'ab\'a0-1\'a0\'bb, you can find the error on the \'ab\'a0errno\'a0\'bb string variable. Otherwise, if the connection succeeded, the socket file descriptor will be equal to 0 (no message), or a value between 1 and the \'ab\'a0bufferSize\'a0\'bb variable (there is a message).\
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa240\partightenfactor0

\f0\b \cf0 Exercise I.c.1
\f1\b0  Try to send messages with each of the clients. Describe the results \'96 do you receive a response immediately?. \
The first connected client is able to immediately receive a response, the second connected client have to wait the first client to be disconnected to get a response. Each client connection in \'ab\'a0netstat\'a0\'bb is marked as an \'ab\'a0established\'a0\'bb connection state.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 Exercise I.c.2
\f1\b0  When you disconnected the first client, what happened? Explain why. After disconnecting the first client, the second client received the answer he was waiting for. The server cannot communicate with multiple clients due to the socket being in \'ab\'a0blocking mode\'a0\'bb by default, so the second client was waiting for his connection to be accepted.\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 Exercice I.c.3
\f1\b0  Measure the round trip time when the client and server are running on the same machine. Also measure the round trip time when they are on different machines. Can you observe any differences? Write down the times. (Note: take the average of a few (> 5) attempts.) \
\
When they running on the same machine, the round trip time is between 0.1 and 0.15 ms. \
I setup the server on Raspberry Pi and the client on PC, and the PC and Raspberry Pi are both connected to a router. In this case, the round trip time is around 3 ms in average, but sometimes up to tens of ms. \
\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 Exercise I.c.4
\f1\b0  Measure the round trip times for two concurrently connected simple clients (similar to exercise I.c.1 ). Discuss with your partner: What is the largest factor in the measured round trip time of the second client? \
\
The largest factor is the time interval from the second client sending out the message to the first client closing the connection.\
\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 Exercise I.d.1
\f1\b0 \
Simulating 7 clients.\
Establishing 7 connections... \
  successfully initiated 7 connection attempts!\
Connect timing results for 7 successful connections\
  - min time: 0.124623 ms\
  - max time: 0.291248 ms\
  - average time: 0.180483 ms\
 (0 connections failed!)\
Roundtrip timing results for 7 connections for 255 round trips\
  - min time: 25.229094 ms\
  - max time: 146.315785 ms\
  - average time: 85.847773 ms\
\
\

\f0\b Exercise I.d.2
\f1\b0 \
Simulating 100 clients.\
Establishing 100 connections... \
  successfully initiated 100 connection attempts!\
Connect timing results for 100 successful connections\
  - min time: 0.950009 ms\
  - max time: 1032.983030 ms\
  - average time: 929.572446 ms\
 (0 connections failed!)\
Roundtrip timing results for 100 connections for 255 round trips\
  - min time: 22.867836 ms\
  - max time: 54676.523240 ms\
  - average time: 7553.827229 ms\
\
Simulating 7 clients.\
Establishing 7 connections... \
  successfully initiated 7 connection attempts!\
Connect timing results for 7 successful connections\
  - min time: 0.090800 ms\
  - max time: 0.198374 ms\
  - average time: 0.123030 ms\
 (0 connections failed!)\
Roundtrip timing results for 7 connections for 10000 round trips\
  - min time: 942.050240 ms\
  - max time: 5835.153086 ms\
  - average time: 3468.632647 ms\
\

\f0\b Exercise I.d.3
\f1\b0 \
In 2 minutes.}